(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{193:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("ol",[a("li",[t._v("Use tooling available to enforce guidelines for the language in JS this would be for example "),a("a",{attrs:{href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint"),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("Line length no more than 80 characters. This also helps with the output in the console and makes it more readable")]),t._v(" "),a("li",[t._v("Tab vs four spaces -> configure the tab to do 4 spaces… like this those who want to waste time typing 4 key stroke, can, but those who want to use the tab key can as well. Why not tabs? Simply because tabs are length is rendered differently in different systems and editors, which can lead weird results.")]),t._v(" "),t._m(0),t._v(" "),a("li",[t._v("Avoid side effects (modify things in the global scope for example our outside of the function doing the job)")]),t._v(" "),a("li",[t._v("Code review seems necessary. This is not a judgemental thing. It is not to find out who is the best. It is meant to help each other become more proficient. If I (Samuel) had to write a JSON endpoint in C# I would not really know where to start. I could write something that works but that is ugly and unmaintainable, it would be best for me to look at my peers and ask for help.")]),t._v(" "),a("li",[t._v("Enforce Pull Requests like mechanism")]),t._v(" "),a("li",[t._v("Use the latest feature of a language. These needs to be learned so we need to invest time in this.")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("It modifies the list variable that might be modified by other functions or the map function modify the list used later on from somewhere unexpected when map(addOne)is called you are not really sure what happens… it will add one to list whatever its value is or needs to be.")]),t._v(" "),a("p",[t._v("The side effects free function looks like this:")]),t._v(" "),t._m(4),a("p",[t._v("This function has internal side effect, but that is ok as it does not modify anything outside its scope and returns a new list with the modified items. It is also referentially transparent as the result of the map function can be swapped for its results. If we consider the list parameter to equal [1, 2, 3] the function to apply to actually add 1 then the result array should be [2, 3, 4]. It can be swapped, and actually the test is already written (part of it).")]),t._v(" "),a("p",[t._v("Here is the same side effect problem represented as a Class. The method map is the method that has side effects")]),t._v(" "),t._m(5),a("p",[t._v("I let you imagine why this is bad practice in a big project as it makes debugging, very complicated.")]),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("Names should be simple and explicit and not reduntant.")]),t._v(" "),t._m(7),t._m(8),t._v(" "),a("p",[t._v("Classes and objects should have noun or noun phrase names like Customer, WikiPage, Account, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name of a class. A class name should not be a verb.")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("We know what is happening, everything is clear if we need the implementation details we can dig in.\n3. use camelCasing for method arguments and local variables.\n4. Pick one word per concept\nThis one is super important. When starting to have a really big code base, the team might start failing to be consistent in the concepts. That might end up having a fetch, retrieve, and get as equivalent methods of different classes.")]),t._v(" "),a("p",[t._v("Imagine you use fetch to call an api that populates your object and get to just return the value of some property. What if you start confusing the two ? You’ll need to always check what is the behaviour of that specific method if you don’t stick with the concept.")]),t._v(" "),a("p",[t._v("Pick one word for one abstract concept and stick with it.")]),t._v(" "),t._m(12),t._v(" "),t._m(13)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("Start curly Braces on the same line as the class method or function delcaration."),s("div",{staticClass:"language-c# extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("class Program {\n    static void Main(string[] args) {\n    }\n}\n")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"functions-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functions-methods","aria-hidden":"true"}},[this._v("#")]),this._v(" Functions/methods")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("“The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that”")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[t._v("No more than 25 lines. This is an arbitrary number, but probably if the function is longer it needs to be refactored")]),t._v(" "),a("li",[t._v("No more than 3 parameters…\n"),a("ol",[a("li",[t._v("no parameters, this mean the function is probably having a side effect,")]),t._v(" "),a("li",[t._v("1 parameter this is perfect and mathematical f(a) -> b This is the best function as it is easy to test.")]),t._v(" "),a("li",[t._v("2 parameters, the function is somehow configurable complexity increase but that is ok")]),t._v(" "),a("li",[t._v("3 parameters there is some rare edge case to handle, most likely the third parameter needs to have a default value.")]),t._v(" "),a("li",[t._v("4 parameters this is Pandora box, and most likely that function can be refactored there is a block that can be extracted etc.")]),t._v(" "),a("li",[t._v("If more than 4 is necessary, consider passing one object to the function. (But seriously, refactor)")])])]),t._v(" "),a("li",[t._v("Referential transparency. "),a("code",[t._v("f(a:int, b:int) -> a + b")]),t._v(" can be replace by "),a("code",[t._v("2 + 2")]),t._v(" or by "),a("code",[t._v("4")]),t._v(". Therefore, tests are easy.")]),t._v(" "),a("li",[t._v("No side effects. The function takes a value, and returns a value, it should not modify anything outside its scope.  Side effects also means that with the same input you get the same output, always. And it should comply to the referential transparency principle.  The following function is dangerous as it has sides effect."),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("functionToApply"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("functionToApply")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("map")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" functionToApply"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("functionToApply")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Something")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    list"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    map"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" map\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nobj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Something")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nobj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("map")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"naming-conventions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#naming-conventions","aria-hidden":"true"}},[this._v("#")]),this._v(" Naming conventions")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-c# extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("    // bad (useless information)\n    public enum coinEnum {\n        Penny,\n        Nickel,\n        Dime,\n        Quarter,\n        Dollar\n    }\n    \n    // good\n    public enum coin {\n        Penny,\n        Nickel,\n        Dime,\n        Quarter,\n        Dollar\n    }\n\n    // bad\n    public async Example methodAsync(Soemthing something) {\n\t\n    }\n\n    // good\n    public async Example method(Soemthing something) {\n\t\n    }\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"class-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-names","aria-hidden":"true"}},[this._v("#")]),this._v(" Class names")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("use PascalCasing for class names."),s("div",{staticClass:"language-c# extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("public class ClientActivity\n{ \n}\n")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"method-function-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-function-names","aria-hidden":"true"}},[this._v("#")]),this._v(" Method/Function names")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[a("p",[t._v("Methods should have verb or verb phrase names like postPayment, deletePage, or save.")])]),t._v(" "),a("li",[a("p",[t._v("Give it non-redundant meaningful names. We are doing poetry, so… I would rather read:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getUser")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addMembership")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("membership"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("saveUser")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"variable-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variable-names","aria-hidden":"true"}},[this._v("#")]),this._v(" Variable names")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[a("p",[t._v("use camelcasing")])]),t._v(" "),a("li",[a("p",[t._v("use meaningful name")])]),t._v(" "),a("li",[a("p",[t._v("Do not use redundant information")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Correct\nint counter;\nstring name;\n\n// Avoid\nint iCounter;\nstring strName;\n")])])])]),t._v(" "),a("li",[a("p",[t._v("use "),a("code",[t._v("_")]),t._v(" for private variables")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" // Correct\n public DateTime clientAppointment;\n public TimeSpan timeLeft;\n \n // Avoid\n public DateTime client_Appointment;\n public TimeSpan time_Left;\n \n // Exception\n private DateTime _registrationDate;\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Avoid abreviations but commonly used ones such as "),a("code",[t._v("http")]),t._v(", "),a("code",[t._v("xml")]),t._v(", "),a("code",[t._v("ftp")]),t._v(", "),a("code",[t._v("uri")]),t._v(", "),a("code",[t._v("id")]),t._v("...")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Correct\nUserGroup userGroup;\nAssignment employeeAssignment;\n\n// Avoid\nUserGroup usrGrp;\nAssignment empAssignment;\n\n// Exceptions\nCustomerId customerId;\nXmlDocument xmlDocument;\nFtpHelper ftpHelper;\nUriPart uriPart;\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Capitalize abreviations: abreviation > 2 characters ? "),a("code",[t._v("PascalCase")]),t._v(" : "),a("code",[t._v("Both uppercase")])]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    HtmlHelper htmlHelper;\n    FtpTransfer ftpTransfer;\n    UIControl uiControl;\n")])])])])])}],!1,null,null,null);s.default=e.exports}}]);